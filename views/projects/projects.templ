package projects

import (
    "fmt"
    "github.com/TylerGilman/nereus_main_site/views/layouts"
    "github.com/TylerGilman/nereus_main_site/views/models"
)

templ Projects(contributions []models.ContributionDay, isAdmin bool) {
    @layouts.Base("projects", isAdmin) {
        @Partial(contributions)
    }
}

templ Partial(contributions []models.ContributionDay) {
  <div id="content" class="content-container">
        <div class="content-section">
            <div class="mb-8 bg-white shadow-lg border-t-2 rounded-lg p-6 w-full">
                <h1 class="section-title">Projects</h1>
                <ul class="list">
                    <li>
                        <span class="list-item-title">This Website</span>
                        <p class="list-item-description">HTMX and Golang (templ)</p>
                    </li>
                    <li>
                        <span class="list-item-title">Chat Memory</span>
                        <p class="list-item-description">LoRA fine tuned llama3.1 8B to summarize chat conversations</p>
                    </li>
                    <li>
                        <span class="list-item-title">Fish Tank</span>
                        <p class="list-item-description">Feed the fish! (vanilla js)</p>
                        <div id="fishtank-container" class="flex flex-col items-center justify-center m-5 w-[600px]">
                            <canvas id="fishtank" class="border-4 border-orange-400 rounded-lg w-[600px] h-[400px]"></canvas>
                        </div>
                    </li>

                </ul>

          <div class="flex flex-col items-center justify-center w-full">
              <div class="project-container mb-8 w-full flex flex-col items-center">
                  @contributionGraph(contributions)
                  @githubButton()
              </div>
          </div>
</div>

        </div>
    </div>
  <script>
(function() {
    let animationFrameId = null;
    let canvas = null;
    let ctx = null;
    let fishes = [];
    let isInitialized = false;

    const CANVAS_WIDTH = 600;
    const CANVAS_HEIGHT = 400;

    function setCanvasSize() {
        if (canvas) {
            canvas.width = CANVAS_WIDTH;
            canvas.height = CANVAS_HEIGHT;
            canvas.style.width = CANVAS_WIDTH + 'px';
            canvas.style.height = CANVAS_HEIGHT + 'px';
            console.log(`Canvas size set to ${CANVAS_WIDTH}x${CANVAS_HEIGHT}`);
        } else {
            console.error('Cannot set canvas size: canvas is null');
        }
    }

    class ConstrainedPoint {
        constructor(x, y, constraintRadius, speed, isHead = false) {
            this.x = x;
            this.y = y;
            this.constraintRadius = constraintRadius;
            this.previousPoint = null;
            this.nextPoint = null;
            this.isHead = isHead;
            this.angle = Math.random() * Math.PI * 2;
            this.speed = speed;
            this.turnRate = 0.2 + (Math.random() * 0.2); // Random turn rate between 0.2 and 0.4
            this.waveAngle = 0.4;
        }

        move(mouseX, mouseY) {
            if (this.isHead) {
                let targetX, targetY;
                if (mouseX !== null && mouseY !== null) {
                    targetX = mouseX;
                    targetY = mouseY;
                } else {
                    targetX = this.x + Math.cos(this.angle) * this.speed;
                    targetY = this.y + Math.sin(this.angle) * this.speed;
                }

                const dx = targetX - this.x;
                const dy = targetY - this.y;
                const targetAngle = Math.atan2(dy, dx);

                const angleDiff = (targetAngle - this.angle + 3 * Math.PI) % (2 * Math.PI) - Math.PI;
                this.angle += Math.sign(angleDiff) * Math.min(Math.abs(angleDiff), this.turnRate);

                this.waveAngle += 0.1;
                const waveOffset = Math.sin(this.waveAngle) * 0.3;
                
                this.x += Math.cos(this.angle + waveOffset) * this.speed;
                this.y += Math.sin(this.angle + waveOffset) * this.speed;

                const margin = 30; // Reduced margin for smaller tank

                if (this.x < margin) this.angle = 0;
                if (this.x > canvas.width - margin) this.angle = Math.PI;
                if (this.y < margin) this.angle = Math.PI / 2;
                if (this.y > canvas.height - margin) this.angle = -Math.PI / 2;

                this.x = Math.max(5, Math.min(canvas.width - 5, this.x));
                this.y = Math.max(5, Math.min(canvas.height - 5, this.y));

                if (mouseX === null && mouseY === null && Math.random() < 0.02) {
                    this.angle += (Math.random() - 0.5) * Math.PI / 4;
                }
            }
        }

        constrain() {
            if (this.previousPoint) {
                const dx = this.x - this.previousPoint.x;
                const dy = this.y - this.previousPoint.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                if (distance > this.constraintRadius) {
                    const angle = Math.atan2(dy, dx);
                    this.x = this.previousPoint.x + Math.cos(angle) * this.constraintRadius;
                    this.y = this.previousPoint.y + Math.sin(angle) * this.constraintRadius;
                }
            }
        }
    }

    class Fish {
        constructor(x, y, color, speed) {
            this.color = color;
            this.speed = speed;
            this.constraintRadius = 4;
            this.numSegments = 6;
            this.bodySizes = Array.from({ length: this.numSegments }, (_, i) => {
                if (i === 0) return 6;
                const t = i / (this.numSegments - 1);
                return 6 * (1 - Math.pow(t, 1.1));
            });
            this.maxBendAngle = Math.PI / 4;

            this.points = Array.from({ length: this.numSegments }, (_, i) =>
                new ConstrainedPoint(x + i * this.constraintRadius, y, this.constraintRadius, this.speed, i === 0)
            );

            for (let i = 1; i < this.points.length; i++) {
                this.points[i].previousPoint = this.points[i - 1];
                this.points[i - 1].nextPoint = this.points[i];
            }
        }

        update(mouseX, mouseY) {
            this.points[0].move(mouseX, mouseY);
            for (const point of this.points) {
                point.constrain();
            }

            for (let i = 0; i < this.points.length - 2; i++) {
                this.limitJointAngle(this.points[i], this.points[i + 1], this.points[i + 2]);
            }
        }

        limitJointAngle(p1, p2, p3) {
            const angle1 = Math.atan2(p2.y - p1.y, p2.x - p1.x);
            const angle2 = Math.atan2(p3.y - p2.y, p3.x - p2.x);
            let angleDiff = (angle2 - angle1 + 3 * Math.PI) % (2 * Math.PI) - Math.PI;

            if (Math.abs(angleDiff) > this.maxBendAngle) {
                const newAngle = angle1 + this.maxBendAngle * Math.sign(angleDiff);
                p3.x = p2.x + Math.cos(newAngle) * this.constraintRadius;
                p3.y = p2.y + Math.sin(newAngle) * this.constraintRadius;
            }
        }

        draw(ctx) {
            const contourPath = this.getOuterContour();
            ctx.fillStyle = this.color;
            ctx.fill(contourPath);
            ctx.strokeStyle = 'rgba(0, 0, 0, 0.3)';
            ctx.lineWidth = 0.5;
            ctx.stroke(contourPath);

            const finPath = this.drawFins(1);
            ctx.fillStyle = this.color;
            ctx.fill(finPath);
            ctx.stroke(finPath);
        }

        getOuterContour() {
            const path = new Path2D();
            const getOuterPoint = (t, side) => {
                const index = Math.min(Math.floor(t * (this.points.length - 1)), this.points.length - 2);
                const localT = (t * (this.points.length - 1)) % 1;
                const p1 = this.points[index];
                const p2 = this.points[index + 1];
                const size1 = this.bodySizes[index];
                const size2 = this.bodySizes[index + 1];

                const x = (1 - localT) * p1.x + localT * p2.x;
                const y = (1 - localT) * p1.y + localT * p2.y;
                const r = (1 - localT) * size1 + localT * size2;
                const angle = Math.atan2(p2.y - p1.y, p2.x - p1.x) + (side * Math.PI / 2);

                return {
                    x: x + r * Math.cos(angle),
                    y: y + r * Math.sin(angle)
                };
            };

            const headCenter = this.points[0];
            const headRadius = this.bodySizes[0];
            const headAngle = Math.atan2(this.points[1].y - this.points[0].y, this.points[1].x - this.points[0].x);

            path.moveTo(headCenter.x + headRadius * Math.cos(headAngle + Math.PI/2), 
                        headCenter.y + headRadius * Math.sin(headAngle + Math.PI/2));

            path.arc(headCenter.x, headCenter.y, headRadius, headAngle + Math.PI/2, headAngle - Math.PI/2, false);

            for (let t = 0; t <= 1; t += 0.1) {
                const point = getOuterPoint(t, -1);
                path.lineTo(point.x, point.y);
            }

            for (let t = 1; t >= 0; t -= 0.1) {
                const point = getOuterPoint(t, 1);
                path.lineTo(point.x, point.y);
            }

            path.closePath();
            return path;
        }

        drawFins(finPointIndex) {
            const finPath = new Path2D();
            const finLength = 6; // Reduced fin length
            const finWidth = 1.5; // Reduced fin width
            const finAngle = Math.PI / 6;

            const finShape = (t, foldFactor) => {
                const x = t * finLength;
                const y = finWidth * Math.sin(t * Math.PI) * foldFactor + x * Math.tan(finAngle);
                return { x, y };
            };

            const p1 = this.points[finPointIndex];
            const p2 = this.points[finPointIndex + 1];
            const p0 = this.points[Math.max(0, finPointIndex - 1)];
            const bodyAngle = Math.atan2(p2.y - p1.y, p2.x - p1.x);
            const prevBodyAngle = Math.atan2(p1.y - p0.y, p1.x - p0.x);
            const turnAngle = (bodyAngle - prevBodyAngle + 3 * Math.PI) % (2 * Math.PI) - Math.PI;

            const size = this.bodySizes[finPointIndex];
            const rightFinBase = {
                x: p1.x + size * Math.cos(bodyAngle + Math.PI / 2),
                y: p1.y + size * Math.sin(bodyAngle + Math.PI / 2)
            };
            const leftFinBase = {
                x: p1.x + size * Math.cos(bodyAngle - Math.PI / 2),
                y: p1.y + size * Math.sin(bodyAngle - Math.PI / 2)
            };

            const rightFoldFactor = 1 - Math.max(0, Math.min(1, turnAngle / (Math.PI / 4)));
            const leftFoldFactor = 1 + Math.max(0, Math.min(1, turnAngle / (Math.PI / 4)));

            finPath.moveTo(rightFinBase.x, rightFinBase.y);
            for (let t = 0; t <= 1; t += 0.1) {
                const point = finShape(t, rightFoldFactor);
                const rotatedX = point.x * Math.cos(bodyAngle + finAngle) - point.y * Math.sin(bodyAngle + finAngle);
                const rotatedY = point.x * Math.sin(bodyAngle + finAngle) + point.y * Math.cos(bodyAngle + finAngle);
                finPath.lineTo(rightFinBase.x + rotatedX, rightFinBase.y + rotatedY);
            }
            finPath.lineTo(rightFinBase.x, rightFinBase.y);

            finPath.moveTo(leftFinBase.x, leftFinBase.y);
            for (let t = 0; t <= 1; t += 0.1) {
                const point = finShape(t, leftFoldFactor);
                const rotatedX = point.x * Math.cos(bodyAngle - finAngle) - (-point.y) * Math.sin(bodyAngle - finAngle);
                const rotatedY = point.x * Math.sin(bodyAngle - finAngle) + (-point.y) * Math.cos(bodyAngle - finAngle);
                finPath.lineTo(leftFinBase.x + rotatedX, leftFinBase.y + rotatedY);
            }
            finPath.lineTo(leftFinBase.x, leftFinBase.y);

            return finPath;
        }
    }

    function getRandomColor() {
        const hue = Math.floor(Math.random() * 360);
        return `hsl(${hue}, 80%, 50%)`;
    }

    function getRandomSpeed(min, max) {
        return Math.random() * (max - min) + min;
    }

    function initializeFishes() {
        const numFish = 10;
        fishes = [];
        const minSpeed = 0.5;
        const maxSpeed = 2.5;

        for (let i = 0; i < numFish; i++) {
            const x = Math.random() * CANVAS_WIDTH;
            const y = Math.random() * CANVAS_HEIGHT;
            const color = getRandomColor();
            const speed = getRandomSpeed(minSpeed, maxSpeed);
            fishes.push(new Fish(x, y, color, speed));
        }
        console.log(`Initialized ${fishes.length} fish`);
    }

    function initializeFishes() {
        const numFish = 10;
        fishes = [];
        const minSpeed = 0.5;
        const maxSpeed = 2.5;

        for (let i = 0; i < numFish; i++) {
            const x = Math.random() * CANVAS_WIDTH;
            const y = Math.random() * CANVAS_HEIGHT;
            const color = getRandomColor();
            const speed = getRandomSpeed(minSpeed, maxSpeed);
            fishes.push(new Fish(x, y, color, speed));
        }
        console.log(`Initialized ${fishes.length} fish`);
    }

    function initializeFishTank() {
        console.log('Initializing fish tank');
        if (isInitialized) {
            console.log('Fish tank already initialized, skipping');
            return;
        }

        canvas = document.getElementById('fishtank');
        if (!canvas) {
            console.error('Fish tank canvas not found');
            return;
        }

        console.log('Canvas found:', canvas);

        ctx = canvas.getContext('2d');
        if (!ctx) {
            console.error('Failed to get 2D context from canvas');
            return;
        }

        setCanvasSize();
        initializeFishes();

        let mouseX = null;
        let mouseY = null;

        canvas.addEventListener('mousemove', (e) => {
            const rect = canvas.getBoundingClientRect();
            mouseX = e.clientX - rect.left;
            mouseY = e.clientY - rect.top;
        });

        canvas.addEventListener('mouseout', () => {
            mouseX = null;
            mouseY = null;
        });

        function draw() {
            if (!document.body.contains(canvas)) {
                console.log('Canvas removed from DOM, stopping animation');
                cancelAnimationFrame(animationFrameId);
                isInitialized = false;
                return;
            }

            ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);

            for (const fish of fishes) {
                fish.update(mouseX, mouseY);
                fish.draw(ctx);
            }

            animationFrameId = requestAnimationFrame(draw);
        }

        // Cancel any existing animation frame before starting a new one
        if (animationFrameId) {
            cancelAnimationFrame(animationFrameId);
        }
        console.log('Starting draw loop');
        draw();
        isInitialized = true;
        console.log('Fish tank initialization complete');
    }

    function cleanUpFishTank() {
        console.log('Cleaning up fish tank');
        if (animationFrameId) {
            cancelAnimationFrame(animationFrameId);
        }
        isInitialized = false;
        fishes = [];
        canvas = null;
        ctx = null;
    }

    // Function to attempt initialization
    function attemptInitialization() {
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            initializeFishTank();
        } else {
            document.addEventListener('DOMContentLoaded', initializeFishTank);
        }
    }

    // Attempt to initialize immediately
    attemptInitialization();

    // Also attempt initialization when the window loads, just in case
    window.addEventListener('load', initializeFishTank);

    // Clean up when navigating away (if using HTMX for navigation)
    document.body.addEventListener('htmx:beforeCleanupElement', function(event) {
        if (event.target.id === 'fishtank-container') {
            console.log('htmx:beforeCleanupElement event fired for fish tank');
            cleanUpFishTank();
        }
    });

    console.log('Fish tank script loaded and initialization attempted');
})();
</script>
}

templ contributionGraph(contributions []models.ContributionDay) {

    <h1 class="font-black text-orange-500 mb-0"> My Last 3 Months of GitHub</h1>
    <div id="github-contributions" class="contribution-graph border-8 border-orange-400">
        for _, column := range organizeContributions(contributions) {
            <div class="contribution-column">
                for i := 0; i < 7; i++ {
                    @contributionDay(column[i])
                }
            </div>
        }
    </div>
    <style>
        .project-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 1vh;
            padding: 20px;
            box-sizing: border-box;
        }
        .contribution-graph {
            display: flex;
            flex-direction: row;
            gap: 2px;
            padding: 10px;
            background-color: #f6f8fa;
            border-radius: 6px;
            overflow-x: auto;
            max-width: 100%;
            margin-bottom: 20px;
        }
        .contribution-column {
            display: grid;
            grid-template-rows: repeat(7, 1fr);
            gap: 2px;
        }
        .contribution-day {
            width: 24px;
            height: 24px;
            border-radius: 2px;
        }
        .contribution-level-0 { background-color: #ebedf0; }
        .contribution-level-1 { background-color: #9be9a8; }
        .contribution-level-2 { background-color: #40c463; }
        .contribution-level-3 { background-color: #30a14e; }
        .contribution-level-4 { background-color: #216e39; }
        .github-button {
            display: inline-flex;
            align-items: center;
            padding: 10px 20px;
            background-color: #24292e;
            color: white;
            text-decoration: none;
            border-radius: 6px;
            font-weight: bold;
            transition: background-color 0.3s;
        }
        .github-button:hover {
            background-color: #2c3238;
        }
        .github-button svg {
            margin-right: 10px;
        }
    </style>
}

templ contributionDay(day models.ContributionDay) {
    <div 
        class={ "contribution-day", fmt.Sprintf("contribution-level-%d", getContributionLevel(day.Count)) }
        title={ fmt.Sprintf("%d contributions on %s", day.Count, day.Date) }
    ></div>
}

templ githubButton() {
    <a href="https://github.com/TylerGilman" class="github-button" target="_blank" rel="noopener noreferrer">
        <svg height="24" aria-hidden="true" viewBox="0 0 16 16" version="1.1" width="24" data-view-component="true">
            <path fill="white" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"></path>
        </svg>
        View GitHub Profile
    </a>
}

func getContributionLevel(count int) int {
    if count == 0 {
        return 0
    } else if count < 5 {
        return 1
    } else if count < 10 {
        return 2
    } else if count < 15 {
        return 3
    }
    return 4
}
