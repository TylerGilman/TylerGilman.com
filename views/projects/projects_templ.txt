<div id=\"content\" class=\"container mx-auto px-4 sm:px-6 lg:px-8 max-w-full sm:max-w-screen-sm md:max-w-screen-md lg:max-w-screen-lg xl:max-w-screen-xl flex flex-col items-center justify-start min-h-screen py-8\"><div class=\"w-full \"><div class=\"mb-8 bg-white shadow-lg border-t-2 rounded-lg p-6 w-full\"><h1>Projects</h1><li>Safe Face </li><li>This Website </li><li>Sports Betting Arbitrage </li><li>Procedural Animation - js-animals (Work in progress only have a fish) </li><div class=\"project-container mb-8\">
<div id=\"fishtank-container\" class=\"m-5 w-full md:w-1/2 h-120 md:h-auto\"><h2 class=\"font-black text-orange-400 text-center justify-center mb-0\">My Fish Tank</h2><canvas id=\"fishtank\" class=\"w-full h-full border-4 border-orange-400 rounded-lg\"></canvas></div>
</div></div></div></div><script>\n(function() {\n    let animationFrameId = null;\n    let canvas = null;\n    let ctx = null;\n    let fishes = [];\n\n    function resizeCanvas() {\n        const container = document.getElementById('fishtank-container');\n        if (container && canvas) {\n            canvas.width = container.offsetWidth;\n            canvas.height = container.offsetHeight;\n        }\n    }\n\n    class ConstrainedPoint {\n        constructor(x, y, constraintRadius, speed, isHead = false) {\n            this.x = x;\n            this.y = y;\n            this.constraintRadius = constraintRadius;\n            this.previousPoint = null;\n            this.nextPoint = null;\n            this.isHead = isHead;\n            this.angle = Math.random() * Math.PI * 2;\n            this.speed = speed;\n            this.turnRate = 0.2 + (Math.random() * 0.2); // Random turn rate between 0.2 and 0.4\n            this.waveAngle = 0.4;\n        }\n\n        move(mouseX, mouseY) {\n            if (this.isHead) {\n                let targetX, targetY;\n                if (mouseX !== null && mouseY !== null) {\n                    targetX = mouseX;\n                    targetY = mouseY;\n                } else {\n                    targetX = this.x + Math.cos(this.angle) * this.speed;\n                    targetY = this.y + Math.sin(this.angle) * this.speed;\n                }\n\n                const dx = targetX - this.x;\n                const dy = targetY - this.y;\n                const targetAngle = Math.atan2(dy, dx);\n\n                const angleDiff = (targetAngle - this.angle + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\n                this.angle += Math.sign(angleDiff) * Math.min(Math.abs(angleDiff), this.turnRate);\n\n                this.waveAngle += 0.1;\n                const waveOffset = Math.sin(this.waveAngle) * 0.3;\n                \n                this.x += Math.cos(this.angle + waveOffset) * this.speed;\n                this.y += Math.sin(this.angle + waveOffset) * this.speed;\n\n                const margin = 30; // Reduced margin for smaller tank\n\n                if (this.x < margin) this.angle = 0;\n                if (this.x > canvas.width - margin) this.angle = Math.PI;\n                if (this.y < margin) this.angle = Math.PI / 2;\n                if (this.y > canvas.height - margin) this.angle = -Math.PI / 2;\n\n                this.x = Math.max(5, Math.min(canvas.width - 5, this.x));\n                this.y = Math.max(5, Math.min(canvas.height - 5, this.y));\n\n                if (mouseX === null && mouseY === null && Math.random() < 0.02) {\n                    this.angle += (Math.random() - 0.5) * Math.PI / 4;\n                }\n            }\n        }\n\n        constrain() {\n            if (this.previousPoint) {\n                const dx = this.x - this.previousPoint.x;\n                const dy = this.y - this.previousPoint.y;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                if (distance > this.constraintRadius) {\n                    const angle = Math.atan2(dy, dx);\n                    this.x = this.previousPoint.x + Math.cos(angle) * this.constraintRadius;\n                    this.y = this.previousPoint.y + Math.sin(angle) * this.constraintRadius;\n                }\n            }\n        }\n    }\n\n    class Fish {\n        constructor(x, y, color, speed) {\n            this.color = color;\n            this.speed = speed;\n            this.constraintRadius = 4;\n            this.numSegments = 6;\n            this.bodySizes = Array.from({ length: this.numSegments }, (_, i) => {\n                if (i === 0) return 6;\n                const t = i / (this.numSegments - 1);\n                return 6 * (1 - Math.pow(t, 1.1));\n            });\n            this.maxBendAngle = Math.PI / 4;\n\n            this.points = Array.from({ length: this.numSegments }, (_, i) =>\n                new ConstrainedPoint(x + i * this.constraintRadius, y, this.constraintRadius, this.speed, i === 0)\n            );\n\n            for (let i = 1; i < this.points.length; i++) {\n                this.points[i].previousPoint = this.points[i - 1];\n                this.points[i - 1].nextPoint = this.points[i];\n            }\n        }\n\n        update(mouseX, mouseY) {\n            this.points[0].move(mouseX, mouseY);\n            for (const point of this.points) {\n                point.constrain();\n            }\n\n            for (let i = 0; i < this.points.length - 2; i++) {\n                this.limitJointAngle(this.points[i], this.points[i + 1], this.points[i + 2]);\n            }\n        }\n\n        limitJointAngle(p1, p2, p3) {\n            const angle1 = Math.atan2(p2.y - p1.y, p2.x - p1.x);\n            const angle2 = Math.atan2(p3.y - p2.y, p3.x - p2.x);\n            let angleDiff = (angle2 - angle1 + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\n\n            if (Math.abs(angleDiff) > this.maxBendAngle) {\n                const newAngle = angle1 + this.maxBendAngle * Math.sign(angleDiff);\n                p3.x = p2.x + Math.cos(newAngle) * this.constraintRadius;\n                p3.y = p2.y + Math.sin(newAngle) * this.constraintRadius;\n            }\n        }\n\n        draw(ctx) {\n            const contourPath = this.getOuterContour();\n            ctx.fillStyle = this.color;\n            ctx.fill(contourPath);\n            ctx.strokeStyle = 'rgba(0, 0, 0, 0.3)';\n            ctx.lineWidth = 0.5;\n            ctx.stroke(contourPath);\n\n            const finPath = this.drawFins(1);\n            ctx.fillStyle = this.color;\n            ctx.fill(finPath);\n            ctx.stroke(finPath);\n        }\n\n        getOuterContour() {\n            const path = new Path2D();\n            const getOuterPoint = (t, side) => {\n                const index = Math.min(Math.floor(t * (this.points.length - 1)), this.points.length - 2);\n                const localT = (t * (this.points.length - 1)) % 1;\n                const p1 = this.points[index];\n                const p2 = this.points[index + 1];\n                const size1 = this.bodySizes[index];\n                const size2 = this.bodySizes[index + 1];\n\n                const x = (1 - localT) * p1.x + localT * p2.x;\n                const y = (1 - localT) * p1.y + localT * p2.y;\n                const r = (1 - localT) * size1 + localT * size2;\n                const angle = Math.atan2(p2.y - p1.y, p2.x - p1.x) + (side * Math.PI / 2);\n\n                return {\n                    x: x + r * Math.cos(angle),\n                    y: y + r * Math.sin(angle)\n                };\n            };\n\n            const headCenter = this.points[0];\n            const headRadius = this.bodySizes[0];\n            const headAngle = Math.atan2(this.points[1].y - this.points[0].y, this.points[1].x - this.points[0].x);\n\n            path.moveTo(headCenter.x + headRadius * Math.cos(headAngle + Math.PI/2), \n                        headCenter.y + headRadius * Math.sin(headAngle + Math.PI/2));\n\n            path.arc(headCenter.x, headCenter.y, headRadius, headAngle + Math.PI/2, headAngle - Math.PI/2, false);\n\n            for (let t = 0; t <= 1; t += 0.1) {\n                const point = getOuterPoint(t, -1);\n                path.lineTo(point.x, point.y);\n            }\n\n            for (let t = 1; t >= 0; t -= 0.1) {\n                const point = getOuterPoint(t, 1);\n                path.lineTo(point.x, point.y);\n            }\n\n            path.closePath();\n            return path;\n        }\n\n        drawFins(finPointIndex) {\n            const finPath = new Path2D();\n            const finLength = 6; // Reduced fin length\n            const finWidth = 1.5; // Reduced fin width\n            const finAngle = Math.PI / 6;\n\n            const finShape = (t, foldFactor) => {\n                const x = t * finLength;\n                const y = finWidth * Math.sin(t * Math.PI) * foldFactor + x * Math.tan(finAngle);\n                return { x, y };\n            };\n\n            const p1 = this.points[finPointIndex];\n            const p2 = this.points[finPointIndex + 1];\n            const p0 = this.points[Math.max(0, finPointIndex - 1)];\n            const bodyAngle = Math.atan2(p2.y - p1.y, p2.x - p1.x);\n            const prevBodyAngle = Math.atan2(p1.y - p0.y, p1.x - p0.x);\n            const turnAngle = (bodyAngle - prevBodyAngle + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\n\n            const size = this.bodySizes[finPointIndex];\n            const rightFinBase = {\n                x: p1.x + size * Math.cos(bodyAngle + Math.PI / 2),\n                y: p1.y + size * Math.sin(bodyAngle + Math.PI / 2)\n            };\n            const leftFinBase = {\n                x: p1.x + size * Math.cos(bodyAngle - Math.PI / 2),\n                y: p1.y + size * Math.sin(bodyAngle - Math.PI / 2)\n            };\n\n            const rightFoldFactor = 1 - Math.max(0, Math.min(1, turnAngle / (Math.PI / 4)));\n            const leftFoldFactor = 1 + Math.max(0, Math.min(1, turnAngle / (Math.PI / 4)));\n\n            finPath.moveTo(rightFinBase.x, rightFinBase.y);\n            for (let t = 0; t <= 1; t += 0.1) {\n                const point = finShape(t, rightFoldFactor);\n                const rotatedX = point.x * Math.cos(bodyAngle + finAngle) - point.y * Math.sin(bodyAngle + finAngle);\n                const rotatedY = point.x * Math.sin(bodyAngle + finAngle) + point.y * Math.cos(bodyAngle + finAngle);\n                finPath.lineTo(rightFinBase.x + rotatedX, rightFinBase.y + rotatedY);\n            }\n            finPath.lineTo(rightFinBase.x, rightFinBase.y);\n\n            finPath.moveTo(leftFinBase.x, leftFinBase.y);\n            for (let t = 0; t <= 1; t += 0.1) {\n                const point = finShape(t, leftFoldFactor);\n                const rotatedX = point.x * Math.cos(bodyAngle - finAngle) - (-point.y) * Math.sin(bodyAngle - finAngle);\n                const rotatedY = point.x * Math.sin(bodyAngle - finAngle) + (-point.y) * Math.cos(bodyAngle - finAngle);\n                finPath.lineTo(leftFinBase.x + rotatedX, leftFinBase.y + rotatedY);\n            }\n            finPath.lineTo(leftFinBase.x, leftFinBase.y);\n\n            return finPath;\n        }\n    }\n\n    function getRandomColor() {\n        const hue = Math.floor(Math.random() * 360);\n        return `hsl(${hue}, 80%, 50%)`;\n    }\n\n    function getRandomSpeed(min, max) {\n        return Math.random() * (max - min) + min;\n    }\n\n    function initializeFishTank() {\n        canvas = document.getElementById('fishtank');\n        if (!canvas) return; // Exit if canvas is not found\n\n        ctx = canvas.getContext('2d');\n\n        window.removeEventListener('resize', resizeCanvas);\n        window.addEventListener('resize', resizeCanvas);\n        resizeCanvas();\n\n        const numFish = 10;\n        fishes = [];\n        const minSpeed = 0.5;\n        const maxSpeed = 2.5;\n\n        for (let i = 0; i < numFish; i++) {\n            const x = Math.random() * canvas.width;\n            const y = Math.random() * canvas.height;\n            const color = getRandomColor();\n            const speed = getRandomSpeed(minSpeed, maxSpeed);\n            fishes.push(new Fish(x, y, color, speed));\n        }\n\n        let mouseX = null;\n        let mouseY = null;\n\n        canvas.addEventListener('mousemove', (e) => {\n            const rect = canvas.getBoundingClientRect();\n            mouseX = e.clientX - rect.left;\n            mouseY = e.clientY - rect.top;\n        });\n\n        canvas.addEventListener('mouseout', () => {\n            mouseX = null;\n            mouseY = null;\n        });\n\n        function draw() {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            for (const fish of fishes) {\n                fish.update(mouseX, mouseY);\n                fish.draw(ctx);\n            }\n\n            animationFrameId = requestAnimationFrame(draw);\n        }\n\n        // Cancel any existing animation frame before starting a new one\n        if (animationFrameId) {\n            cancelAnimationFrame(animationFrameId);\n        }\n        draw();\n    }\n\n    // Clean up function to stop animation when leaving the page\n    function cleanUpFishTank() {\n        if (animationFrameId) {\n            cancelAnimationFrame(animationFrameId);\n        }\n        window.removeEventListener('resize', resizeCanvas);\n    }\n\n    // Initialize fish tank on page load\n    document.addEventListener('DOMContentLoaded', initializeFishTank);\n\n    // Initialize or reinitialize fish tank after HTMX content swap\n    document.body.addEventListener('htmx:afterSwap', function(event) {\n        // Short delay to ensure DOM is updated\n        setTimeout(initializeFishTank, 0);\n    });\n\n    // Clean up when navigating away (if using HTMX for navigation)\n    document.body.addEventListener('htmx:beforeCleanupElement', function(event) {\n        if (event.target.id === 'fishtank-container') {\n            cleanUpFishTank();\n        }\n    });\n})();\n</script>
<h1 class=\"font-black text-orange-500 mb-0\">My Last 3 Months of GitHub</h1><div id=\"github-contributions\" class=\"contribution-graph border-8 border-orange-400\">
<div class=\"contribution-column\">
</div>
</div><style>\n        .project-container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            min-height: 1vh;\n            padding: 20px;\n            box-sizing: border-box;\n        }\n        .contribution-graph {\n            display: flex;\n            flex-direction: row;\n            gap: 2px;\n            padding: 10px;\n            background-color: #f6f8fa;\n            border-radius: 6px;\n            overflow-x: auto;\n            max-width: 100%;\n            margin-bottom: 20px;\n        }\n        .contribution-column {\n            display: grid;\n            grid-template-rows: repeat(7, 1fr);\n            gap: 2px;\n        }\n        .contribution-day {\n            width: 24px;\n            height: 24px;\n            border-radius: 2px;\n        }\n        .contribution-level-0 { background-color: #ebedf0; }\n        .contribution-level-1 { background-color: #9be9a8; }\n        .contribution-level-2 { background-color: #40c463; }\n        .contribution-level-3 { background-color: #30a14e; }\n        .contribution-level-4 { background-color: #216e39; }\n        .github-button {\n            display: inline-flex;\n            align-items: center;\n            padding: 10px 20px;\n            background-color: #24292e;\n            color: white;\n            text-decoration: none;\n            border-radius: 6px;\n            font-weight: bold;\n            transition: background-color 0.3s;\n        }\n        .github-button:hover {\n            background-color: #2c3238;\n        }\n        .github-button svg {\n            margin-right: 10px;\n        }\n    </style>
<div class=\"
\" title=\"
\"></div>
<a href=\"https://github.com/TylerGilman\" class=\"github-button\" target=\"_blank\" rel=\"noopener noreferrer\"><svg height=\"24\" aria-hidden=\"true\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"24\" data-view-component=\"true\"><path fill=\"white\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path></svg> View GitHub Profile</a>
